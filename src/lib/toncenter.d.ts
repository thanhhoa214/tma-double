/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v3/masterchainInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Masterchain Info */
        get: operations["get_masterchain_info_api_v3_masterchainInfo_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/blocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Blocks
         * @description Returns blocks by specified filters.
         */
        get: operations["get_blocks_api_v3_blocks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/masterchainBlockShardState": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Shards By Masterchain Block */
        get: operations["get_shards_by_masterchain_block_api_v3_masterchainBlockShardState_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/addressBook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Address Book
         * @description Returns an address book for given address list.
         */
        get: operations["get_address_book_api_v3_addressBook_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/masterchainBlockShards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Masterchain Block Shards
         * @description Returns all worchain blocks, that appeared after previous masterchain block.
         *
         *     **Note:** this method is not equivalent with [/api/v2/shards](https://toncenter.com/api/v2/#/blocks/get_shards_shards_get).
         */
        get: operations["get_masterchain_block_shards_api_v3_masterchainBlockShards_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Transactions
         * @description Get transactions by specified filters.
         */
        get: operations["get_transactions_api_v3_transactions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/transactionsByMasterchainBlock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Transactions By Masterchain Block
         * @description Returns transactions from masterchain block and from all shards.
         */
        get: operations["get_transactions_by_masterchain_block_api_v3_transactionsByMasterchainBlock_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/transactionsByMessage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Transactions By Message
         * @description Get transactions whose inbound/outbound message has the specified hash. This endpoint returns list of Transaction objects
         *     since collisions of message hashes can occur.
         */
        get: operations["get_transactions_by_message_api_v3_transactionsByMessage_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/adjacentTransactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Adjacent Transactions
         * @description Get parent and/or children for specified transaction.
         */
        get: operations["get_adjacent_transactions_api_v3_adjacentTransactions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Messages
         * @description Get messages by specified filters.
         */
        get: operations["get_messages_api_v3_messages_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/nft/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Nft Collections
         * @description Get NFT collections.
         */
        get: operations["get_nft_collections_api_v3_nft_collections_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/nft/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Nft Items
         * @description Get NFT items.
         */
        get: operations["get_nft_items_api_v3_nft_items_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/nft/transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Nft Transfers
         * @description Get NFT transfers by specified filters.
         */
        get: operations["get_nft_transfers_api_v3_nft_transfers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/jetton/masters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Jetton Masters
         * @description Get Jetton masters by specified filters.
         */
        get: operations["get_jetton_masters_api_v3_jetton_masters_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/jetton/wallets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Jetton Wallets
         * @description Get Jetton wallets by specified filters.
         */
        get: operations["get_jetton_wallets_api_v3_jetton_wallets_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/jetton/transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Jetton Transfers
         * @description Get Jetton transfers by specified filters.
         */
        get: operations["get_jetton_transfers_api_v3_jetton_transfers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/jetton/burns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Jetton Burns
         * @description Get Jetton burns by specified filters.
         */
        get: operations["get_jetton_burns_api_v3_jetton_burns_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Message
         * @description Send external message to TON network.
         */
        post: operations["send_message_api_v3_message_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/runGetMethod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run Get Method
         * @description Run get method of smart contract. Stack supports only `num`, `cell` and `slice` types:
         *     ```
         *     [
         *         {
         *             "type": "num",
         *             "value": "0x12a"
         *         },
         *         {
         *             "type": "cell",
         *             "value": "te6..." // base64 encoded boc with cell
         *         },
         *         {
         *             "type": "slice",
         *             "value": "te6..." // base64 encoded boc with slice
         *         }
         *     ]
         *     ```
         */
        post: operations["run_get_method_api_v3_runGetMethod_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/estimateFee": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Estimate Fee
         * @description Estimate fee for external message.
         */
        post: operations["estimate_fee_api_v3_estimateFee_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account Information
         * @description Get smart contract information.
         */
        get: operations["get_account_information_api_v3_account_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/wallet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Wallet Information
         * @description Get wallet smart contract information. The following wallets are supported: `v1r1`, `v1r2`, `v1r3`, `v2r1`, `v2r2`, `v3r1`, `v3r2`, `v4r1`, `v4r2`.
         *     In case the account is not a wallet error code 409 is returned.
         */
        get: operations["get_wallet_information_api_v3_wallet_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/notcoin_holders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Notcoin Holders
         * @description Get Notcoin voucher holders
         */
        get: operations["get_notcoin_holders_api_v3_notcoin_holders_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Account */
        Account: {
            /** Balance */
            balance: string;
            /** Code */
            code: string | null;
            /** Data */
            data: string | null;
            /** Last Transaction Lt */
            last_transaction_lt: string | null;
            /** Last Transaction Hash */
            last_transaction_hash: string | null;
            /** Frozen Hash */
            frozen_hash: string | null;
            status: components["schemas"]["AccountStatus"];
        };
        /** AccountState */
        AccountState: {
            /** Hash */
            hash: string;
            /** Balance */
            balance: string | null;
            account_status: components["schemas"]["AccountStatus"] | null;
            /** Frozen Hash */
            frozen_hash: string | null;
            /** Code Hash */
            code_hash: string | null;
            /** Data Hash */
            data_hash: string | null;
        };
        /**
         * AccountStatus
         * @enum {string}
         */
        AccountStatus: "uninit" | "frozen" | "active" | "nonexist";
        /** AddressBookEntry */
        AddressBookEntry: {
            /** User Friendly */
            user_friendly: string;
        };
        /** BinaryComment */
        BinaryComment: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "binary_comment";
            /** Hex Comment */
            hex_comment: string;
        };
        /** Block */
        Block: {
            /** Workchain */
            workchain: number;
            /** Shard */
            shard: string;
            /** Seqno */
            seqno: number;
            /** Root Hash */
            root_hash: string;
            /** File Hash */
            file_hash: string;
            /** Global Id */
            global_id: number;
            /** Version */
            version: number;
            /** After Merge */
            after_merge: boolean;
            /** Before Split */
            before_split: boolean;
            /** After Split */
            after_split: boolean;
            /** Want Merge */
            want_merge: boolean;
            /** Want Split */
            want_split: boolean;
            /** Key Block */
            key_block: boolean;
            /** Vert Seqno Incr */
            vert_seqno_incr: boolean;
            /** Flags */
            flags: number;
            /** Gen Utime */
            gen_utime: string;
            /** Start Lt */
            start_lt: string;
            /** End Lt */
            end_lt: string;
            /** Validator List Hash Short */
            validator_list_hash_short: number;
            /** Gen Catchain Seqno */
            gen_catchain_seqno: number;
            /** Min Ref Mc Seqno */
            min_ref_mc_seqno: number;
            /** Prev Key Block Seqno */
            prev_key_block_seqno: number;
            /** Vert Seqno */
            vert_seqno: number;
            /** Master Ref Seqno */
            master_ref_seqno: number | null;
            /** Rand Seed */
            rand_seed: string;
            /** Created By */
            created_by: string;
            /** Tx Count */
            tx_count: number | null;
            masterchain_block_ref: components["schemas"]["BlockReference"] | null;
            /** Prev Blocks */
            prev_blocks: components["schemas"]["BlockReference"][];
        };
        /** BlockList */
        BlockList: {
            /** Blocks */
            blocks: components["schemas"]["Block"][];
        };
        /** BlockReference */
        BlockReference: {
            /** Workchain */
            workchain: number;
            /** Shard */
            shard: string;
            /** Seqno */
            seqno: number;
        };
        /** EstimateFeeRequest */
        EstimateFeeRequest: {
            /** Address */
            address: string;
            /** Body */
            body: string;
            /** Init Code */
            init_code?: string | null;
            /** Init Data */
            init_data?: string | null;
            /**
             * Ignore Chksig
             * @default true
             */
            ignore_chksig: boolean;
        };
        /** EstimateFeeResponse */
        EstimateFeeResponse: {
            source_fees: components["schemas"]["Fee"];
            /** Destination Fees */
            destination_fees: components["schemas"]["Fee"][];
        };
        /**
         * ExternalMessage
         * @description Message in base64 boc serialized format.
         */
        ExternalMessage: {
            /** Boc */
            boc: string;
        };
        /** Fee */
        Fee: {
            /** In Fwd Fee */
            in_fwd_fee: number;
            /** Storage Fee */
            storage_fee: number;
            /** Gas Fee */
            gas_fee: number;
            /** Fwd Fee */
            fwd_fee: number;
        };
        /** GetMethodParameter */
        "GetMethodParameter-Input": {
            type: components["schemas"]["GetMethodParameterType"];
            /** Value */
            value: components["schemas"]["GetMethodParameter-Input"][] | string | null;
        };
        /** GetMethodParameter */
        "GetMethodParameter-Output": {
            type: components["schemas"]["GetMethodParameterType"];
            /** Value */
            value: components["schemas"]["GetMethodParameter-Output"][] | string | null;
        };
        /**
         * GetMethodParameterType
         * @enum {string}
         */
        GetMethodParameterType: "cell" | "slice" | "num" | "list" | "tuple" | "unsupported_type";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** JettonBurn */
        JettonBurn: {
            /** Query Id */
            query_id: string;
            /** Owner */
            owner: string;
            /** Jetton Master */
            jetton_master: string;
            /** Transaction Hash */
            transaction_hash: string;
            /** Transaction Lt */
            transaction_lt: string;
            /** Transaction Now */
            transaction_now: number;
            /** Amount */
            amount: string;
            /** Response Destination */
            response_destination: string | null;
            /** Custom Payload */
            custom_payload: string | null;
        };
        /** JettonBurnList */
        JettonBurnList: {
            /** Jetton Burns */
            jetton_burns: components["schemas"]["JettonBurn"][];
        };
        /** JettonMaster */
        JettonMaster: {
            /** Address */
            address: string;
            /** Total Supply */
            total_supply: string;
            /** Mintable */
            mintable: boolean;
            /** Admin Address */
            admin_address: string | null;
            /** Last Transaction Lt */
            last_transaction_lt: string;
            /** Jetton Wallet Code Hash */
            jetton_wallet_code_hash: string;
            /** Jetton Content */
            jetton_content: unknown;
            /** Code Hash */
            code_hash: string;
            /** Data Hash */
            data_hash: string;
        };
        /** JettonMasterList */
        JettonMasterList: {
            /** Jetton Masters */
            jetton_masters: components["schemas"]["JettonMaster"][];
        };
        /** JettonTransfer */
        JettonTransfer: {
            /** Query Id */
            query_id: string;
            /** Source */
            source: string | null;
            /** Destination */
            destination: string | null;
            /** Amount */
            amount: string;
            /** Source Wallet */
            source_wallet: string;
            /** Jetton Master */
            jetton_master: string;
            /** Transaction Hash */
            transaction_hash: string;
            /** Transaction Lt */
            transaction_lt: string;
            /** Transaction Now */
            transaction_now: number;
            /** Response Destination */
            response_destination: string | null;
            /** Custom Payload */
            custom_payload: string | null;
            /** Forward Ton Amount */
            forward_ton_amount: string | null;
            /** Forward Payload */
            forward_payload: string | null;
        };
        /** JettonTransferList */
        JettonTransferList: {
            /** Jetton Transfers */
            jetton_transfers: components["schemas"]["JettonTransfer"][];
        };
        /** JettonWallet */
        JettonWallet: {
            /** Address */
            address: string;
            /** Balance */
            balance: string;
            /** Owner */
            owner: string;
            /** Jetton */
            jetton: string;
            /** Last Transaction Lt */
            last_transaction_lt: string;
            /** Code Hash */
            code_hash: string;
            /** Data Hash */
            data_hash: string;
        };
        /** JettonWalletList */
        JettonWalletList: {
            /** Jetton Wallets */
            jetton_wallets: components["schemas"]["JettonWallet"][];
        };
        /** MasterchainInfo */
        MasterchainInfo: {
            last: components["schemas"]["Block"];
            first: components["schemas"]["Block"];
        };
        /** Message */
        Message: {
            /** Hash */
            hash: string;
            /** Source */
            source: string | null;
            /** Destination */
            destination: string | null;
            /** Value */
            value: string | null;
            /** Fwd Fee */
            fwd_fee: string | null;
            /** Ihr Fee */
            ihr_fee: string | null;
            /** Created Lt */
            created_lt: string | null;
            /** Created At */
            created_at: string | null;
            /** Opcode */
            opcode: string | null;
            /** Ihr Disabled */
            ihr_disabled: boolean | null;
            /** Bounce */
            bounce: boolean | null;
            /** Bounced */
            bounced: boolean | null;
            /** Import Fee */
            import_fee: string | null;
            message_content: components["schemas"]["MessageContent"] | null;
            init_state: components["schemas"]["MessageInitState"] | null;
        };
        /** MessageContent */
        MessageContent: {
            /** Hash */
            hash: string;
            /** Body */
            body: string;
            /** Decoded */
            decoded: (components["schemas"]["TextComment"] | components["schemas"]["BinaryComment"]) | null;
        };
        /** MessageInitState */
        MessageInitState: {
            /** Hash */
            hash: string;
            /** Body */
            body: string;
        };
        /** MessageList */
        MessageList: {
            /** Messages */
            messages: components["schemas"]["Message"][];
        };
        /** NFTCollection */
        NFTCollection: {
            /** Address */
            address: string;
            /** Owner Address */
            owner_address: string | null;
            /** Last Transaction Lt */
            last_transaction_lt: string;
            /** Next Item Index */
            next_item_index: string;
            /** Collection Content */
            collection_content: unknown;
            /** Code Hash */
            code_hash: string;
            /** Data Hash */
            data_hash: string;
        };
        /** NFTCollectionList */
        NFTCollectionList: {
            /** Nft Collections */
            nft_collections: components["schemas"]["NFTCollection"][];
        };
        /** NFTItem */
        NFTItem: {
            /** Address */
            address: string;
            /** Collection Address */
            collection_address: string | null;
            /** Owner Address */
            owner_address: string | null;
            /** Init */
            init: boolean;
            /** Index */
            index: string;
            /** Last Transaction Lt */
            last_transaction_lt: string;
            /** Code Hash */
            code_hash: string;
            /** Data Hash */
            data_hash: string;
            /** Content */
            content: unknown;
            collection: components["schemas"]["NFTCollection"] | null;
        };
        /** NFTItemList */
        NFTItemList: {
            /** Nft Items */
            nft_items: components["schemas"]["NFTItem"][];
        };
        /** NFTTransfer */
        NFTTransfer: {
            /** Query Id */
            query_id: string;
            /** Nft Address */
            nft_address: string;
            /** Transaction Hash */
            transaction_hash: string;
            /** Transaction Lt */
            transaction_lt: string;
            /** Transaction Now */
            transaction_now: number;
            /** Old Owner */
            old_owner: string;
            /** New Owner */
            new_owner: string;
            /** Response Destination */
            response_destination: string | null;
            /** Custom Payload */
            custom_payload: string | null;
            /** Forward Amount */
            forward_amount: string;
            /** Forward Payload */
            forward_payload: string | null;
        };
        /** NFTTransferList */
        NFTTransferList: {
            /** Nft Transfers */
            nft_transfers: components["schemas"]["NFTTransfer"][];
        };
        /** RunGetMethodRequest */
        RunGetMethodRequest: {
            /** Address */
            address: string;
            /** Method */
            method: string;
            /** Stack */
            stack: components["schemas"]["GetMethodParameter-Input"][];
        };
        /** RunGetMethodResponse */
        RunGetMethodResponse: {
            /** Gas Used */
            gas_used: number;
            /** Exit Code */
            exit_code: number;
            /** Stack */
            stack: components["schemas"]["GetMethodParameter-Output"][];
        };
        /** SentMessage */
        SentMessage: {
            /**
             * Message Hash
             * @description Hash of sent message in hex format
             */
            message_hash: string;
        };
        /** TextComment */
        TextComment: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "text_comment";
            /** Comment */
            comment: string;
        };
        /** Transaction */
        Transaction: {
            /** Account */
            account: string;
            /** Hash */
            hash: string;
            /** Lt */
            lt: string;
            /** Now */
            now: number;
            orig_status: components["schemas"]["AccountStatus"];
            end_status: components["schemas"]["AccountStatus"];
            /** Total Fees */
            total_fees: string;
            /** Prev Trans Hash */
            prev_trans_hash: string;
            /** Prev Trans Lt */
            prev_trans_lt: string;
            /** Description */
            description: unknown;
            block_ref: components["schemas"]["BlockReference"] | null;
            in_msg: components["schemas"]["Message"] | null;
            /** Out Msgs */
            out_msgs: components["schemas"]["Message"][];
            account_state_before: components["schemas"]["AccountState"] | null;
            account_state_after: components["schemas"]["AccountState"] | null;
            /** Mc Block Seqno */
            mc_block_seqno: number | null;
        };
        /** TransactionList */
        TransactionList: {
            /** Transactions */
            transactions: components["schemas"]["Transaction"][];
            /** Address Book */
            address_book: {
                [key: string]: components["schemas"]["AddressBookEntry"] | undefined;
            };
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** WalletInfo */
        WalletInfo: {
            /** Balance */
            balance: string;
            /** Wallet Type */
            wallet_type: string | null;
            /** Seqno */
            seqno: number | null;
            /** Wallet Id */
            wallet_id: number | null;
            /** Last Transaction Lt */
            last_transaction_lt: string | null;
            /** Last Transaction Hash */
            last_transaction_hash: string | null;
            status: components["schemas"]["AccountStatus"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_masterchain_info_api_v3_masterchainInfo_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MasterchainInfo"];
                };
            };
        };
    };
    get_blocks_api_v3_blocks_get: {
        parameters: {
            query?: {
                /** @description Block workchain. */
                workchain?: number | null;
                /** @description Block shard id. Must be sent with *workchain*. Example: `8000000000000000` */
                shard?: string | null;
                /** @description Block block seqno. Must be sent with *workchain* and *shard*. */
                seqno?: number | null;
                /** @description Query blocks with generation UTC timestamp **after** given timestamp. */
                start_utime?: number | null;
                /** @description Query blocks with generation UTC timestamp **before** given timestamp */
                end_utime?: number | null;
                /** @description Query blocks with `lt >= start_lt` */
                start_lt?: number | null;
                /** @description Query blocks with `lt <= end_lt` */
                end_lt?: number | null;
                /** @description Limit number of queried rows. Use with *offset* to batch read. */
                limit?: number;
                /** @description Skip first N rows. Use with *limit* to batch read. */
                offset?: number;
                /** @description Sort results by UTC timestamp. */
                sort?: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_shards_by_masterchain_block_api_v3_masterchainBlockShardState_get: {
        parameters: {
            query: {
                /** @description Masterchain block seqno */
                seqno: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_address_book_api_v3_addressBook_get: {
        parameters: {
            query: {
                /** @description List of addresses in any form. Max: 1024 */
                address: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: components["schemas"]["AddressBookEntry"] | undefined;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_masterchain_block_shards_api_v3_masterchainBlockShards_get: {
        parameters: {
            query: {
                /** @description Masterchain block seqno */
                seqno: number;
                /** @description Include masterchain block */
                include_mc_block?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_transactions_api_v3_transactions_get: {
        parameters: {
            query?: {
                /** @description Block workchain. */
                workchain?: number | null;
                /** @description Block shard id. Must be sent with *workchain*. Example: `8000000000000000` */
                shard?: string | null;
                /** @description Block block seqno. Must be sent with *workchain* and *shard*. Must be sent in hex form. */
                seqno?: number | null;
                /** @description List of account addresses to get transactions. Can be sent in hex, base64 or base64url form. */
                account?: string[];
                /** @description Exclude transactions on specified account addresses */
                exclude_account?: string[];
                /** @description Transaction hash. Acceptable in hex, base64 and base64url forms. */
                hash?: string | null;
                /** @description Transaction lt. */
                lt?: number | null;
                /** @description Query transactions with generation UTC timestamp **after** given timestamp. */
                start_utime?: number | null;
                /** @description Query transactions with generation UTC timestamp **before** given timestamp */
                end_utime?: number | null;
                /** @description Query transactions with `lt >= start_lt` */
                start_lt?: number | null;
                /** @description Query transactions with `lt <= end_lt` */
                end_lt?: number | null;
                /** @description Limit number of queried rows. Use with *offset* to batch read. */
                limit?: number;
                /** @description Skip first N rows. Use with *limit* to batch read. */
                offset?: number;
                /** @description Sort transactions by lt. */
                sort?: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_transactions_by_masterchain_block_api_v3_transactionsByMasterchainBlock_get: {
        parameters: {
            query: {
                /** @description Masterchain block seqno */
                seqno: number;
                /** @description Limit number of queried rows. Use with *offset* to batch read. */
                limit?: number;
                /** @description Skip first N rows. Use with *limit* to batch read. */
                offset?: number;
                /** @description Sort transactions by lt. */
                sort?: "none" | "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_transactions_by_message_api_v3_transactionsByMessage_get: {
        parameters: {
            query: {
                /** @description Message direction. */
                direction: "in" | "out";
                /** @description Message hash. Acceptable in hex, base64 and base64url forms. */
                msg_hash: string | null;
                /** @description Limit number of queried rows. Use with *offset* to batch read. */
                limit?: number;
                /** @description Skip first N rows. Use with *limit* to batch read. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_adjacent_transactions_api_v3_adjacentTransactions_get: {
        parameters: {
            query: {
                /** @description Transaction hash. Acceptable in hex, base64 and base64url forms. */
                hash: string;
                /** @description Direction transactions by lt. */
                direction?: "in" | "out" | "both";
                /** @description Limit number of queried rows. Use with *offset* to batch read. */
                limit?: number;
                /** @description Skip first N rows. Use with *limit* to batch read. */
                offset?: number;
                /** @description Sort transactions by lt. */
                sort?: "none" | "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_messages_api_v3_messages_get: {
        parameters: {
            query?: {
                /** @description Message hash. Acceptable in hex, base64 and base64url forms. */
                hash?: string;
                /** @description The source account address. Can be sent in hex, base64 or base64url form. Use value `null` to get external messages. */
                source?: string | null;
                /** @description The destination account address. Can be sent in hex, base64 or base64url form. Use value `null` to get log messages. */
                destination?: string | null;
                /** @description Message body hash. Acceptable in hex, base64 and base64url forms. */
                body_hash?: string | null;
                /** @description Limit number of queried rows. Use with *offset* to batch read. */
                limit?: number;
                /** @description Skip first N rows. Use with *limit* to batch read. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_nft_collections_api_v3_nft_collections_get: {
        parameters: {
            query?: {
                /** @description NFT collection address. Must be sent in hex, base64 and base64url forms. */
                collection_address?: string | null;
                /** @description Address of NFT collection owner. Must be sent in hex, base64 and base64url forms. */
                owner_address?: string | null;
                /** @description Limit number of queried rows. Use with *offset* to batch read. */
                limit?: number;
                /** @description Skip first N rows. Use with *limit* to batch read. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NFTCollectionList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_nft_items_api_v3_nft_items_get: {
        parameters: {
            query?: {
                /** @description NFT address. Must be sent in hex, base64 and base64url forms. */
                address?: string | null;
                /** @description Address of NFT owner. Must be sent in hex, base64 and base64url forms. */
                owner_address?: string | null;
                /** @description NFT collection address. Must be sent in hex, base64 and base64url forms. */
                collection_address?: string | null;
                /** @description NFT Item index. Use it together with collection address. */
                index?: string | null;
                /** @description Limit number of queried rows. Use with *offset* to batch read. */
                limit?: number;
                /** @description Skip first N rows. Use with *limit* to batch read. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NFTItemList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_nft_transfers_api_v3_nft_transfers_get: {
        parameters: {
            query?: {
                /** @description Address of NFT owner. Must be sent in hex, base64 and base64url forms. */
                address?: string | null;
                /** @description NFT item address. Must be sent in hex, base64 and base64url forms. */
                item_address?: string | null;
                /** @description NFT collection address. Must be sent in hex, base64 and base64url forms. */
                collection_address?: string | null;
                /** @description Direction transactions by lt. */
                direction?: "in" | "out" | "both";
                /** @description Query transactions with generation UTC timestamp **after** given timestamp. */
                start_utime?: number | null;
                /** @description Query transactions with generation UTC timestamp **before** given timestamp */
                end_utime?: number | null;
                /** @description Query transactions with `lt >= start_lt` */
                start_lt?: number | null;
                /** @description Query transactions with `lt <= end_lt` */
                end_lt?: number | null;
                /** @description Limit number of queried rows. Use with *offset* to batch read. */
                limit?: number;
                /** @description Skip first N rows. Use with *limit* to batch read. */
                offset?: number;
                /** @description Sort transactions by lt. */
                sort?: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NFTTransferList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_jetton_masters_api_v3_jetton_masters_get: {
        parameters: {
            query?: {
                /** @description Jetton Master address. Must be sent in hex, base64 and base64url forms. */
                address?: string;
                /** @description Address of Jetton Master's admin. Must be sent in hex, base64 and base64url forms. */
                admin_address?: string;
                /** @description Limit number of queried rows. Use with *offset* to batch read. */
                limit?: number;
                /** @description Skip first N rows. Use with *limit* to batch read. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JettonMasterList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_jetton_wallets_api_v3_jetton_wallets_get: {
        parameters: {
            query?: {
                /** @description Jetton wallet address. Must be sent in hex, base64 and base64url forms. */
                address?: string;
                /** @description Address of Jetton wallet's owner. Must be sent in hex, base64 and base64url forms. */
                owner_address?: string;
                /** @description Jetton Master. Must be sent in hex, base64 and base64url forms. */
                jetton_address?: string;
                /** @description Limit number of queried rows. Use with *offset* to batch read. */
                limit?: number;
                /** @description Skip first N rows. Use with *limit* to batch read. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JettonWalletList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_jetton_transfers_api_v3_jetton_transfers_get: {
        parameters: {
            query?: {
                /** @description Account address. Must be sent in hex, base64 and base64url forms. */
                address?: string | null;
                /** @description Jetton wallet address. Must be sent in hex, base64 and base64url forms. */
                jetton_wallet?: string | null;
                /** @description Jetton master address. Must be sent in hex, base64 and base64url forms. */
                jetton_master?: string | null;
                /** @description Direction transactions by lt. */
                direction?: "in" | "out" | "both";
                /** @description Query transactions with generation UTC timestamp **after** given timestamp. */
                start_utime?: number | null;
                /** @description Query transactions with generation UTC timestamp **before** given timestamp */
                end_utime?: number | null;
                /** @description Query transactions with `lt >= start_lt` */
                start_lt?: number | null;
                /** @description Query transactions with `lt <= end_lt` */
                end_lt?: number | null;
                /** @description Limit number of queried rows. Use with *offset* to batch read. */
                limit?: number;
                /** @description Skip first N rows. Use with *limit* to batch read. */
                offset?: number;
                /** @description Sort transactions by lt. */
                sort?: "none" | "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JettonTransferList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_jetton_burns_api_v3_jetton_burns_get: {
        parameters: {
            query?: {
                /** @description Account address. Must be sent in hex, base64 and base64url forms. */
                address?: string | null;
                /** @description Jetton wallet address. Must be sent in hex, base64 and base64url forms. */
                jetton_wallet?: string | null;
                /** @description Jetton master address. Must be sent in hex, base64 and base64url forms. */
                jetton_master?: string | null;
                /** @description Query transactions with generation UTC timestamp **after** given timestamp. */
                start_utime?: number | null;
                /** @description Query transactions with generation UTC timestamp **before** given timestamp */
                end_utime?: number | null;
                /** @description Query transactions with `lt >= start_lt` */
                start_lt?: number | null;
                /** @description Query transactions with `lt <= end_lt` */
                end_lt?: number | null;
                /** @description Limit number of queried rows. Use with *offset* to batch read. */
                limit?: number;
                /** @description Skip first N rows. Use with *limit* to batch read. */
                offset?: number;
                /** @description Sort transactions by lt. */
                sort?: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JettonBurnList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_message_api_v3_message_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExternalMessage"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SentMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    run_get_method_api_v3_runGetMethod_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RunGetMethodRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RunGetMethodResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    estimate_fee_api_v3_estimateFee_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EstimateFeeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EstimateFeeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_account_information_api_v3_account_get: {
        parameters: {
            query: {
                /** @description Account address. Can be sent in raw or user-friendly form. */
                address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_wallet_information_api_v3_wallet_get: {
        parameters: {
            query: {
                /** @description Smart contract address. Can be sent in raw or user-friendly form. */
                address: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WalletInfo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_notcoin_holders_api_v3_notcoin_holders_get: {
        parameters: {
            query?: {
                /** @description Limit number of queried rows. Use with *offset* to batch read. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
